#include <iostream>
#include<time.h>
using namespace std;

const float ro = 0.9;    // коэффициент vigilance

int counter(bool *a){     // считает сколько единичек в векторе
	int sum = 0;
	for (int k = 0; k < 6; k++){
		if (a[k] == 1) sum++;
	}
	return sum;
}

bool* logAND(bool *b, bool *c){  // Оператор И для двух векторов
	bool *d = new bool[6];

	for (int k = 0; k < 6; k++){
		d[k] = (b[k] && c[k]);
	}
	return d;
}

void rec(bool *b, bool *c){  // присваивает значение второго массива в первый
	bool *d = new bool[6];

	for (int k = 0; k < 6; k++){
		b[k] =  c[k];
	}
}

int main(){
	int vectorflag[10] = {};      // массив обозначающий какой вектор к какому кластеру относится

	bool vectors[10][6];
	srand(time(NULL));
	for (int i = 0; i < 10; i++){  // Забиваем двумерный массив рандомными значениями
		for (int k = 0; k < 6; k++){
			vectors[i][k] = rand() % 2;
		}
	}

	for (int i = 0; i < 10; i++){  // Смотрим что получилось

		for (int k = 0; k < 6; k++){
			cout << vectors[i][k];
		}
		cout << endl;
	}
	bool proxContainer[10][6];  // массив прототип векторов

	vectorflag[0] = 1;  // так как первый вектор автоматически становится первым прототип вектором

	rec(proxContainer[0], vectors[0]); // создаем первый прототип вектор из первого вектора

	int nclaster = 1; // содержит количество прототип векторов

	
	for (int i = 1; i < 10; i++){      // идем по каждому вектору со второго
		bool f = false;                
		for (int k = 0; k < nclaster; k++) {  // проверяем каждый кластер с первого
			if (																			
				((counter(logAND(proxContainer[k], vectors[i]))) /                             //  test of similarity
				1 + counter(proxContainer[k]))>(counter(vectors[i]) / 1 + 6)
				)
				// если тест на схожесть пройден, то идет vigilance тест
			{
				// test of vigilance
				if (
					(((counter(logAND(proxContainer[k], vectors[i]))) / counter(vectors[i])) < ro)
					)
					{
					vectorflag[i] = k ;        // обозначаем что данный вектор в данном кластере
					logAND(proxContainer[k], vectors[i]); //включить вектор в прототип вектора класса
					f = true;
					}
				else {     // если тест на vigilance не пройден 
					rec(proxContainer[k + 1], vectors[i]);// то прототип вектор нового кластера будет равен данному вектору
					++nclaster;   //и будет создан новый кластер 
					f = true;
					}
				}
			if ((!f) & (k = (nclaster-1))){  // когда тест на схожесть не прошел ни 1 кластер
				rec(proxContainer[k + 1], vectors[i]);
				vectorflag[i] = k + 1;        // обозначаем что данный вектор в новом кластере
				++nclaster;					// создается новый кластер
				}				
														}
											}
	/* bool *d;
	d = logAND(vectors[0], vectors[1]);

	for (int k = 0; k < 6; k++){    // показываю результат логического И
		cout << d[k] << " ";
	}  */
	cout << endl;
	for (int i = 0; i < 10; i++){  // Выдаю результат по кластерам
		cout << vectorflag[i];
		cout << endl;
	}
	system("pause");
	return 0;
}
